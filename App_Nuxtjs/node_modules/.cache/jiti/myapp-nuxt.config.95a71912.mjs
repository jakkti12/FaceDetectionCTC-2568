"use strict";Object.defineProperty(exports, "__esModule", { value: true });exports.default = void 0;var _vitePluginVuetify = _interopRequireWildcard(await jitiImport("vite-plugin-vuetify"));
var _config = await jitiImport("nuxt/config");
var _dotenv = _interopRequireDefault(await jitiImport("dotenv"));
var _fs = _interopRequireDefault(await jitiImport("fs"));function _interopRequireDefault(e) {return e && e.__esModule ? e : { default: e };}function _getRequireWildcardCache(e) {if ("function" != typeof WeakMap) return null;var r = new WeakMap(),t = new WeakMap();return (_getRequireWildcardCache = function (e) {return e ? t : r;})(e);}function _interopRequireWildcard(e, r) {if (!r && e && e.__esModule) return e;if (null === e || "object" != typeof e && "function" != typeof e) return { default: e };var t = _getRequireWildcardCache(r);if (t && t.has(e)) return t.get(e);var n = { __proto__: null },a = Object.defineProperty && Object.getOwnPropertyDescriptor;for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];}return n.default = e, t && t.set(e, n), n;}
_dotenv.default.config();

let httpsOptions = {};
try {
  httpsOptions = {
    key: _fs.default.readFileSync('./ssl/key.pem'),
    cert: _fs.default.readFileSync('./ssl/cert.pem')
  };
} catch (error) {
  console.warn('⚠️ ไม่พบไฟล์ SSL, รัน HTTP แทน');
}var _default = exports.default =

(0, _config.defineNuxtConfig)({
  compatibilityDate: '2024-04-03',

  runtimeConfig: {
    public: {
      apiBase: process.env.API_BASE || 'http://localhost:7000'
    }
  },

  devServer: {
    // https: httpsOptions
    port: 3000
  },

  server: {
    host: '203.113.123.194',
    port: 3333
  },

  devtools: { enabled: true },

  // เพิ่มโมดูล Apollo และ Vuetify
  modules: [
  (_options, nuxt) => {
    nuxt.hooks.hook('vite:extendConfig', (config) => {
      // @ts-expect-error
      config.plugins.push((0, _vitePluginVuetify.default)({ autoImport: true }));
    });
  }],


  // การตั้งค่า Vite สำหรับ Vuetify
  vite: {
    vue: {
      template: {
        transformAssetUrls: _vitePluginVuetify.transformAssetUrls
      }
    }
  },

  // การตั้งค่า CSS
  css: [
  '~/assets/css/bootstrap.min.css',
  '~/assets/css/custom.css',
  '~/assets/icons/bootstrap-icons.css'],


  // การตั้งค่า Plugins
  plugins: [
  { src: '~/plugins/bootstrap.client.js', mode: 'client' },
  { src: '~/plugins/auth.ts', mode: 'client' }],

  // การตั้งค่า Transpile
  build: {
    transpile: ['vuetify']
  }
}); /* v9-3fb11e0a0b83de37 */
